{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaspagnoletti/Desktop/second_time_around/client/src/components/Webcam/index.js\";\nimport React from \"react\";\nimport Webcam from \"react-webcam\";\n\nclass WebcamCapture extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.setRef = webcam => {\n      this.webcam = webcam;\n    };\n\n    this.capture = () => {\n      const imageSrc = this.webcam.getScreenshot();\n      this.uploadFile(imageSrc);\n    };\n\n    this.dataURItoBlob = dataURI => {\n      var binary = atob(dataURI.split(',')[1]);\n      var array = [];\n\n      for (var i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n      }\n\n      return new Blob([new Uint8Array(array)], {\n        type: 'image/jpeg'\n      });\n    };\n\n    this.uploadFile = encodedImageString => {\n      const formData = new FormData();\n      formData.append(0, this.dataURItoBlob(encodedImageString)); //sends the img to server\n\n      fetch(\"http://localhost:3001/image-upload\", {\n        method: 'POST',\n        body: formData\n      }).then(res => res.json()).then(images => {\n        console.log(images[0].url);\n      });\n    };\n  }\n\n  render() {\n    const videoConstraints = {\n      width: 1280,\n      height: 720,\n      facingMode: \"user\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(Webcam, {\n      audio: false,\n      height: 350,\n      ref: this.setRef,\n      screenshotFormat: \"image/jpeg\",\n      width: 350,\n      videoConstraints: videoConstraints,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.capture,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Capture photo\"));\n  }\n\n}\n\nexport default WebcamCapture;","map":{"version":3,"sources":["/Users/sofiaspagnoletti/Desktop/second_time_around/client/src/components/Webcam/index.js"],"names":["React","Webcam","WebcamCapture","Component","setRef","webcam","capture","imageSrc","getScreenshot","uploadFile","dataURItoBlob","dataURI","binary","atob","split","array","i","length","push","charCodeAt","Blob","Uint8Array","type","encodedImageString","formData","FormData","append","fetch","method","body","then","res","json","images","console","log","url","render","videoConstraints","width","height","facingMode"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAGA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAAA;AAAA;;AAAA,SAC1CC,MAD0C,GACjCC,MAAM,IAAI;AACjB,WAAKA,MAAL,GAAcA,MAAd;AACD,KAHyC;;AAAA,SAK1CC,OAL0C,GAKhC,MAAM;AACd,YAAMC,QAAQ,GAAG,KAAKF,MAAL,CAAYG,aAAZ,EAAjB;AACA,WAAKC,UAAL,CAAgBF,QAAhB;AACD,KARyC;;AAAA,SAgC1CG,aAhC0C,GAgC1BC,OAAO,IAAI;AACzB,UAAIC,MAAM,GAAGC,IAAI,CAACF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAAjB;AACA,UAAIC,KAAK,GAAG,EAAZ;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,MAAM,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCD,QAAAA,KAAK,CAACG,IAAN,CAAWN,MAAM,CAACO,UAAP,CAAkBH,CAAlB,CAAX;AACH;;AACD,aAAO,IAAII,IAAJ,CAAS,CAAC,IAAIC,UAAJ,CAAeN,KAAf,CAAD,CAAT,EAAkC;AAACO,QAAAA,IAAI,EAAE;AAAP,OAAlC,CAAP;AACH,KAvC2C;;AAAA,SAyC1Cb,UAzC0C,GAyC7Bc,kBAAkB,IAAI;AACjC,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AAEAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,CAAhB,EAAmB,KAAKhB,aAAL,CAAmBa,kBAAnB,CAAnB,EAHiC,CAKjC;;AACAI,MAAAA,KAAK,uCAAuC;AAC1CC,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,IAAI,EAAEL;AAFoC,OAAvC,CAAL,CAIGM,IAJH,CAIQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJf,EAKGF,IALH,CAKQG,MAAM,IAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAAC,CAAD,CAAN,CAAUG,GAAtB;AACD,OAPH;AAQD,KAvDyC;AAAA;;AAU1CC,EAAAA,MAAM,GAAG;AACP,UAAMC,gBAAgB,GAAG;AACvBC,MAAAA,KAAK,EAAE,IADgB;AAEvBC,MAAAA,MAAM,EAAE,GAFe;AAGvBC,MAAAA,UAAU,EAAE;AAHW,KAAzB;AAMA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAE,KADT;AAEE,MAAA,MAAM,EAAE,GAFV;AAGE,MAAA,GAAG,EAAE,KAAKrC,MAHZ;AAIE,MAAA,gBAAgB,EAAC,YAJnB;AAKE,MAAA,KAAK,EAAE,GALT;AAME,MAAA,gBAAgB,EAAEkC,gBANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EASE;AAAQ,MAAA,OAAO,EAAE,KAAKhC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBATF,CADF;AAaD;;AA9ByC;;AA0D5C,eAAeJ,aAAf","sourcesContent":["import React from \"react\";\nimport Webcam from \"react-webcam\";\n \n\nclass WebcamCapture extends React.Component {\n  setRef = webcam => {\n    this.webcam = webcam;\n  };\n \n  capture = () => {\n    const imageSrc = this.webcam.getScreenshot();\n    this.uploadFile(imageSrc);\n  };\n \n  render() {\n    const videoConstraints = {\n      width: 1280,\n      height: 720,\n      facingMode: \"user\"\n    };\n \n    return (\n      <div>\n        <Webcam\n          audio={false}\n          height={350}\n          ref={this.setRef}\n          screenshotFormat=\"image/jpeg\"\n          width={350}\n          videoConstraints={videoConstraints}\n        />\n        <button onClick={this.capture}>Capture photo</button>\n      </div>\n    );\n  }\n  \n  dataURItoBlob = dataURI => {\n    var binary = atob(dataURI.split(',')[1]);\n    var array = [];\n    for(var i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type: 'image/jpeg'});\n}\n\n  uploadFile = encodedImageString => {\n    const formData = new FormData();\n\n    formData.append(0, this.dataURItoBlob(encodedImageString));\n\n    //sends the img to server\n    fetch(`http://localhost:3001/image-upload`, {\n      method: 'POST',\n      body: formData\n    })\n      .then(res => res.json())\n      .then(images => {\n        console.log(images[0].url);\n      });\n  }\n}\n\nexport default WebcamCapture;\n"]},"metadata":{},"sourceType":"module"}