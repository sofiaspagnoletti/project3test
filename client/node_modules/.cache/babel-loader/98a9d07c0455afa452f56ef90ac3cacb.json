{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaspagnoletti/Desktop/second_time_around/client/src/components/Webcam/index.js\";\n// import React from \"react\";\n// import Webcam from \"react-webcam\";\n// class WebcamCapture extends React.Component {\n//   setRef = webcam => {\n//     this.webcam = webcam;\n//   };\n//   capture = () => {\n//     const imageSrc = this.webcam.getScreenshot();\n//   };\n//   render() {\n//     const videoConstraints = {\n//       width: 1280,\n//       height: 720,\n//       facingMode: \"user\"\n//     };\n//     return (\n//       <div>\n//         <Webcam\n//           audio={false}\n//           height={350}\n//           ref={this.setRef}\n//           screenshotFormat=\"image/jpeg\"\n//           width={350}\n//           videoConstraints={videoConstraints}\n//         />\n//         <button onClick={this.capture}>Capture photo</button>\n//       </div>\n//     );\n//   }\n// }\n// export default WebcamCapture;\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction hasGetUserMedia() {\n  return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);\n}\n\nconst constrainStringType = PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), PropTypes.shape({\n  exact: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n}), PropTypes.shape({\n  ideal: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n})]);\nconst constrainBooleanType = PropTypes.oneOfType([PropTypes.shape({\n  exact: PropTypes.bool\n}), PropTypes.shape({\n  ideal: PropTypes.bool\n})]);\nconst constrainLongType = PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n  exact: PropTypes.number,\n  ideal: PropTypes.number,\n  min: PropTypes.number,\n  max: PropTypes.number\n})]);\nconst constrainDoubleType = constrainLongType;\nconst audioConstraintType = PropTypes.shape({\n  deviceId: constrainStringType,\n  groupId: constrainStringType,\n  autoGainControl: constrainBooleanType,\n  channelCount: constrainLongType,\n  latency: constrainDoubleType,\n  noiseSuppression: constrainBooleanType,\n  sampleRate: constrainLongType,\n  sampleSize: constrainLongType,\n  volume: constrainDoubleType\n});\nconst videoConstraintType = PropTypes.shape({\n  deviceId: constrainStringType,\n  groupId: constrainStringType,\n  aspectRatio: constrainDoubleType,\n  facingMode: constrainStringType,\n  frameRate: constrainDoubleType,\n  height: constrainLongType,\n  width: constrainLongType\n});\nexport default class Webcam extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasUserMedia: false\n    };\n  }\n\n  componentDidMount() {\n    if (!hasGetUserMedia()) return;\n    const state = this.state;\n    Webcam.mountedInstances.push(this);\n\n    if (!state.hasUserMedia && !Webcam.userMediaRequested) {\n      this.requestUserMedia();\n    }\n  }\n\n  componentDidUpdate(nextProps) {\n    const props = this.props;\n\n    if (JSON.stringify(nextProps.audioConstraints) !== JSON.stringify(props.audioConstraints) || JSON.stringify(nextProps.videoConstraints) !== JSON.stringify(props.videoConstraints)) {\n      this.requestUserMedia();\n    }\n  }\n\n  componentWillUnmount() {\n    const state = this.state;\n    const index = Webcam.mountedInstances.indexOf(this);\n    Webcam.mountedInstances.splice(index, 1);\n    Webcam.userMediaRequested = false;\n\n    if (Webcam.mountedInstances.length === 0 && state.hasUserMedia) {\n      if (this.stream.getVideoTracks && this.stream.getAudioTracks) {\n        this.stream.getVideoTracks().map(track => track.stop());\n        this.stream.getAudioTracks().map(track => track.stop());\n      } else {\n        this.stream.stop();\n      }\n\n      window.URL.revokeObjectURL(state.src);\n    }\n  }\n\n  getScreenshot() {\n    const state = this.state,\n          props = this.props;\n    if (!state.hasUserMedia) return null;\n    const canvas = this.getCanvas();\n    return canvas && canvas.toDataURL(props.screenshotFormat, props.screenshotQuality);\n  }\n\n  getCanvas() {\n    const state = this.state,\n          props = this.props;\n    if (!state.hasUserMedia || !this.video.videoHeight) return null;\n\n    if (!this.ctx) {\n      const canvas = document.createElement('canvas');\n      const aspectRatio = this.video.videoWidth / this.video.videoHeight;\n      let canvasWidth = props.minScreenshotWidth || this.video.clientWidth;\n      let canvasHeight = canvasWidth / aspectRatio;\n\n      if (props.minScreenshotHeight && canvasHeight < props.minScreenshotHeight) {\n        canvasHeight = props.minScreenshotHeight;\n        canvasWidth = canvasHeight * aspectRatio;\n      }\n\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      this.canvas = canvas;\n      this.ctx = canvas.getContext('2d');\n    }\n\n    const ctx = this.ctx,\n          canvas = this.canvas;\n    ctx.imageSmoothingEnabled = props.imageSmoothing;\n    ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n    return canvas;\n  }\n\n  requestUserMedia() {\n    const props = this.props;\n    navigator.getUserMedia = navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n\n    const sourceSelected = (audioConstraints, videoConstraints) => {\n      const constraints = {\n        video: typeof videoConstraints !== 'undefined' ? videoConstraints : true\n      };\n\n      if (props.audio) {\n        constraints.audio = typeof audioConstraints !== 'undefined' ? audioConstraints : true;\n      }\n\n      navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n        Webcam.mountedInstances.forEach(instance => instance.handleUserMedia(null, stream));\n      }).catch(e => {\n        Webcam.mountedInstances.forEach(instance => instance.handleUserMedia(e));\n      });\n    };\n\n    if ('mediaDevices' in navigator) {\n      sourceSelected(props.audioConstraints, props.videoConstraints);\n    } else {\n      const optionalSource = id => ({\n        optional: [{\n          sourceId: id\n        }]\n      });\n\n      const constraintToSourceId = constraint => {\n        const _ref = constraint || {},\n              deviceId = _ref.deviceId;\n\n        if (typeof deviceId === 'string') {\n          return deviceId;\n        }\n\n        if (Array.isArray(deviceId) && deviceId.length > 0) {\n          return deviceId[0];\n        }\n\n        if (typeof deviceId === 'object' && deviceId.ideal) {\n          return deviceId.ideal;\n        }\n\n        return null;\n      };\n\n      MediaStreamTrack.getSources(sources => {\n        let audioSource = null;\n        let videoSource = null;\n        sources.forEach(source => {\n          if (source.kind === 'audio') {\n            audioSource = source.id;\n          } else if (source.kind === 'video') {\n            videoSource = source.id;\n          }\n        });\n        const audioSourceId = constraintToSourceId(props.audioConstraints);\n\n        if (audioSourceId) {\n          audioSource = audioSourceId;\n        }\n\n        const videoSourceId = constraintToSourceId(props.videoConstraints);\n\n        if (videoSourceId) {\n          videoSource = videoSourceId;\n        }\n\n        sourceSelected(optionalSource(audioSource), optionalSource(videoSource));\n      });\n    }\n\n    Webcam.userMediaRequested = true;\n  }\n\n  handleUserMedia(err, stream) {\n    const props = this.props;\n\n    if (err) {\n      this.setState({\n        hasUserMedia: false\n      });\n      props.onUserMediaError(err);\n      return;\n    }\n\n    this.stream = stream;\n\n    try {\n      this.video.srcObject = stream;\n      this.setState({\n        hasUserMedia: true\n      });\n    } catch (error) {\n      this.setState({\n        hasUserMedia: true,\n        src: window.URL.createObjectURL(stream)\n      });\n    }\n\n    props.onUserMedia();\n  }\n\n  render() {\n    const state = this.state,\n          props = this.props;\n    return React.createElement(\"video\", {\n      autoPlay: true,\n      width: props.width,\n      height: props.height,\n      src: state.src,\n      muted: props.audio,\n      className: props.className,\n      playsInline: true,\n      style: props.style,\n      ref: ref => {\n        this.video = ref;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    });\n  }\n\n}\nWebcam.defaultProps = {\n  audio: true,\n  className: '',\n  height: 480,\n  imageSmoothing: true,\n  onUserMedia: () => {},\n  onUserMediaError: () => {},\n  screenshotFormat: 'image/webp',\n  width: 640,\n  screenshotQuality: 0.92\n};\nWebcam.propTypes = {\n  audio: PropTypes.bool,\n  onUserMedia: PropTypes.func,\n  onUserMediaError: PropTypes.func,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  screenshotFormat: PropTypes.oneOf(['image/webp', 'image/png', 'image/jpeg']),\n  style: PropTypes.object,\n  className: PropTypes.string,\n  screenshotQuality: PropTypes.number,\n  minScreenshotWidth: PropTypes.number,\n  minScreenshotHeight: PropTypes.number,\n  audioConstraints: audioConstraintType,\n  videoConstraints: videoConstraintType,\n  imageSmoothing: PropTypes.bool\n};\nWebcam.mountedInstances = [];\nWebcam.userMediaRequested = false;","map":{"version":3,"sources":["/Users/sofiaspagnoletti/Desktop/second_time_around/client/src/components/Webcam/index.js"],"names":["React","Component","PropTypes","hasGetUserMedia","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","constrainStringType","oneOfType","string","arrayOf","shape","exact","ideal","constrainBooleanType","bool","constrainLongType","number","min","max","constrainDoubleType","audioConstraintType","deviceId","groupId","autoGainControl","channelCount","latency","noiseSuppression","sampleRate","sampleSize","volume","videoConstraintType","aspectRatio","facingMode","frameRate","height","width","Webcam","constructor","state","hasUserMedia","componentDidMount","mountedInstances","push","userMediaRequested","requestUserMedia","componentDidUpdate","nextProps","props","JSON","stringify","audioConstraints","videoConstraints","componentWillUnmount","index","indexOf","splice","length","stream","getVideoTracks","getAudioTracks","map","track","stop","window","URL","revokeObjectURL","src","getScreenshot","canvas","getCanvas","toDataURL","screenshotFormat","screenshotQuality","video","videoHeight","ctx","document","createElement","videoWidth","canvasWidth","minScreenshotWidth","clientWidth","canvasHeight","minScreenshotHeight","getContext","imageSmoothingEnabled","imageSmoothing","drawImage","sourceSelected","constraints","audio","then","forEach","instance","handleUserMedia","catch","e","optionalSource","id","optional","sourceId","constraintToSourceId","constraint","Array","isArray","MediaStreamTrack","getSources","sources","audioSource","videoSource","source","kind","audioSourceId","videoSourceId","err","setState","onUserMediaError","srcObject","error","createObjectURL","onUserMedia","render","className","style","ref","defaultProps","propTypes","func","oneOf","object"],"mappings":"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","sourcesContent":["// import React from \"react\";\n// import Webcam from \"react-webcam\";\n \n\n// class WebcamCapture extends React.Component {\n//   setRef = webcam => {\n//     this.webcam = webcam;\n//   };\n \n//   capture = () => {\n//     const imageSrc = this.webcam.getScreenshot();\n//   };\n \n//   render() {\n//     const videoConstraints = {\n//       width: 1280,\n//       height: 720,\n//       facingMode: \"user\"\n//     };\n \n//     return (\n//       <div>\n//         <Webcam\n//           audio={false}\n//           height={350}\n//           ref={this.setRef}\n//           screenshotFormat=\"image/jpeg\"\n//           width={350}\n//           videoConstraints={videoConstraints}\n//         />\n//         <button onClick={this.capture}>Capture photo</button>\n//       </div>\n//     );\n//   }\n// }\n\n// export default WebcamCapture;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction hasGetUserMedia() {\n  return !!(\n    (navigator.mediaDevices && navigator.mediaDevices.getUserMedia)\n    || navigator.webkitGetUserMedia\n    || navigator.mozGetUserMedia\n    || navigator.msGetUserMedia\n  );\n}\n\nconst constrainStringType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.arrayOf(PropTypes.string),\n  PropTypes.shape({\n    exact: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n  }),\n  PropTypes.shape({\n    ideal: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n  }),\n]);\n\nconst constrainBooleanType = PropTypes.oneOfType([\n  PropTypes.shape({\n    exact: PropTypes.bool,\n  }),\n  PropTypes.shape({\n    ideal: PropTypes.bool,\n  }),\n]);\n\nconst constrainLongType = PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.shape({\n    exact: PropTypes.number,\n    ideal: PropTypes.number,\n    min: PropTypes.number,\n    max: PropTypes.number,\n  }),\n]);\n\nconst constrainDoubleType = constrainLongType;\n\nconst audioConstraintType = PropTypes.shape({\n  deviceId: constrainStringType,\n  groupId: constrainStringType,\n  autoGainControl: constrainBooleanType,\n  channelCount: constrainLongType,\n  latency: constrainDoubleType,\n  noiseSuppression: constrainBooleanType,\n  sampleRate: constrainLongType,\n  sampleSize: constrainLongType,\n  volume: constrainDoubleType,\n});\n\nconst videoConstraintType = PropTypes.shape({\n  deviceId: constrainStringType,\n  groupId: constrainStringType,\n  aspectRatio: constrainDoubleType,\n  facingMode: constrainStringType,\n  frameRate: constrainDoubleType,\n  height: constrainLongType,\n  width: constrainLongType,\n});\n\nexport default class Webcam extends Component {\n  static defaultProps = {\n    audio: true,\n    className: '',\n    height: 480,\n    imageSmoothing: true,\n    onUserMedia: () => {},\n    onUserMediaError: () => {},\n    screenshotFormat: 'image/webp',\n    width: 640,\n    screenshotQuality: 0.92,\n  };\n\n  static propTypes = {\n    audio: PropTypes.bool,\n    onUserMedia: PropTypes.func,\n    onUserMediaError: PropTypes.func,\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    screenshotFormat: PropTypes.oneOf([\n      'image/webp',\n      'image/png',\n      'image/jpeg',\n    ]),\n    style: PropTypes.object,\n    className: PropTypes.string,\n    screenshotQuality: PropTypes.number,\n    minScreenshotWidth: PropTypes.number,\n    minScreenshotHeight: PropTypes.number,\n    audioConstraints: audioConstraintType,\n    videoConstraints: videoConstraintType,\n    imageSmoothing: PropTypes.bool,\n  };\n\n  static mountedInstances = [];\n\n  static userMediaRequested = false;\n\n  constructor() {\n    super();\n    this.state = {\n      hasUserMedia: false,\n    };\n  }\n\n  componentDidMount() {\n    if (!hasGetUserMedia()) return;\n\n    const { state } = this;\n\n    Webcam.mountedInstances.push(this);\n\n    if (!state.hasUserMedia && !Webcam.userMediaRequested) {\n      this.requestUserMedia();\n    }\n  }\n\n  componentDidUpdate(nextProps) {\n    const { props } = this;\n    if (\n      JSON.stringify(nextProps.audioConstraints)\n        !== JSON.stringify(props.audioConstraints)\n      || JSON.stringify(nextProps.videoConstraints)\n        !== JSON.stringify(props.videoConstraints)\n    ) {\n      this.requestUserMedia();\n    }\n  }\n\n  componentWillUnmount() {\n    const { state } = this;\n    const index = Webcam.mountedInstances.indexOf(this);\n    Webcam.mountedInstances.splice(index, 1);\n\n    Webcam.userMediaRequested = false;\n    if (Webcam.mountedInstances.length === 0 && state.hasUserMedia) {\n      if (this.stream.getVideoTracks && this.stream.getAudioTracks) {\n        this.stream.getVideoTracks().map(track => track.stop());\n        this.stream.getAudioTracks().map(track => track.stop());\n      } else {\n        this.stream.stop();\n      }\n      window.URL.revokeObjectURL(state.src);\n    }\n  }\n\n  getScreenshot() {\n    const { state, props } = this;\n\n    if (!state.hasUserMedia) return null;\n\n    const canvas = this.getCanvas();\n    return (\n      canvas\n      && canvas.toDataURL(\n        props.screenshotFormat,\n        props.screenshotQuality,\n      )\n    );\n  }\n\n  getCanvas() {\n    const { state, props } = this;\n\n    if (!state.hasUserMedia || !this.video.videoHeight) return null;\n\n    if (!this.ctx) {\n      const canvas = document.createElement('canvas');\n      const aspectRatio = this.video.videoWidth / this.video.videoHeight;\n\n      let canvasWidth = props.minScreenshotWidth || this.video.clientWidth;\n      let canvasHeight = canvasWidth / aspectRatio;\n\n      if (props.minScreenshotHeight && (canvasHeight < props.minScreenshotHeight)) {\n        canvasHeight = props.minScreenshotHeight;\n        canvasWidth = canvasHeight * aspectRatio;\n      }\n\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n\n      this.canvas = canvas;\n      this.ctx = canvas.getContext('2d');\n    }\n\n    const { ctx, canvas } = this;\n    ctx.imageSmoothingEnabled = props.imageSmoothing;\n    ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n\n    return canvas;\n  }\n\n  requestUserMedia() {\n    const { props } = this;\n\n    navigator.getUserMedia = navigator.mediaDevices.getUserMedia\n      || navigator.webkitGetUserMedia\n      || navigator.mozGetUserMedia\n      || navigator.msGetUserMedia;\n\n    const sourceSelected = (audioConstraints, videoConstraints) => {\n      const constraints = {\n        video: typeof videoConstraints !== 'undefined' ? videoConstraints : true,\n      };\n\n      if (props.audio) {\n        constraints.audio = typeof audioConstraints !== 'undefined' ? audioConstraints : true;\n      }\n\n      navigator.mediaDevices\n        .getUserMedia(constraints)\n        .then((stream) => {\n          Webcam.mountedInstances.forEach(instance => instance.handleUserMedia(null, stream));\n        })\n        .catch((e) => {\n          Webcam.mountedInstances.forEach(instance => instance.handleUserMedia(e));\n        });\n    };\n\n    if ('mediaDevices' in navigator) {\n      sourceSelected(props.audioConstraints, props.videoConstraints);\n    } else {\n      const optionalSource = id => ({ optional: [{ sourceId: id }] });\n\n      const constraintToSourceId = (constraint) => {\n        const { deviceId } = constraint || {};\n\n        if (typeof deviceId === 'string') {\n          return deviceId;\n        }\n\n        if (Array.isArray(deviceId) && deviceId.length > 0) {\n          return deviceId[0];\n        }\n\n        if (typeof deviceId === 'object' && deviceId.ideal) {\n          return deviceId.ideal;\n        }\n\n        return null;\n      };\n\n      MediaStreamTrack.getSources((sources) => {\n        let audioSource = null;\n        let videoSource = null;\n\n        sources.forEach((source) => {\n          if (source.kind === 'audio') {\n            audioSource = source.id;\n          } else if (source.kind === 'video') {\n            videoSource = source.id;\n          }\n        });\n\n        const audioSourceId = constraintToSourceId(props.audioConstraints);\n        if (audioSourceId) {\n          audioSource = audioSourceId;\n        }\n\n        const videoSourceId = constraintToSourceId(props.videoConstraints);\n        if (videoSourceId) {\n          videoSource = videoSourceId;\n        }\n\n        sourceSelected(\n          optionalSource(audioSource),\n          optionalSource(videoSource),\n        );\n      });\n    }\n\n    Webcam.userMediaRequested = true;\n  }\n\n  handleUserMedia(err, stream) {\n    const { props } = this;\n\n    if (err) {\n      this.setState({ hasUserMedia: false });\n      props.onUserMediaError(err);\n\n      return;\n    }\n\n    this.stream = stream;\n\n    try {\n      this.video.srcObject = stream;\n      this.setState({ hasUserMedia: true });\n    } catch (error) {\n      this.setState({\n        hasUserMedia: true,\n        src: window.URL.createObjectURL(stream),\n      });\n    }\n\n    props.onUserMedia();\n  }\n\n  render() {\n    const { state, props } = this;\n\n    return (\n      <video\n        autoPlay\n        width={props.width}\n        height={props.height}\n        src={state.src}\n        muted={props.audio}\n        className={props.className}\n        playsInline\n        style={props.style}\n        ref={(ref) => {\n          this.video = ref;\n        }}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}